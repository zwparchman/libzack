#!/usr/bin/env python3

#if a prefix is for the symbols is required put it here
prefix=""

graphics_mode = "\\033[{}m"

attrs = {
    "off": 0,
    "bold" : 1,
    "underscore": 4,
    "blink" : 5,
    "reverse_video" : 7,
    "concealed" : 8
}

background_offset = 40
forground_offset =  30
colors={
    "black" : 0,
    "red" : 1,
    "green" : 2,
    "yellow" : 3,
    "blue" : 4,
    "magenta" : 5,
    "cyan": 6,
    "white": 7
}

print ("/* This file was generated by libzack/build_color.py */")
print ()
print ("#ifndef LIBZACK_COLOR_H")
print ("#define LIBZACK_COLOR_H")
print ()

def out(var_name, value):
    var_name=prefix + var_name
    as_define(var_name, value)
    set_con_string(var_name, var_name.upper())

def set_con_string(var_name, value):
    print ("char const * {} = {};".format(var_name, value))

def as_define(var_name, value):
    value = graphics_mode.format(value)
    print("#define {} \"{}\"".format(var_name.upper(), value))

for k,v in colors.items():
    out(k+"_background",str(background_offset+v))
    out(k+"_forground ",str(forground_offset+v))
    print ()

for k,v in attrs.items():
    out(k+"_attr", str(v))
    print()


print("""
/** This function returns an empty string if color should be used (is a tty) and returns the requested string otherwise */
#include <unistd.h>
char const * smart_color_print(char const * c){
    //both stdout and stderr are ttys
    if( isatty(2) && isatty(1) ){
        return c;
    } else {
        return "";
    }
}
""")

print()
print ("#endif")
